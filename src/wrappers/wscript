
import glob

def check_catalyst(ctx):
    ctx.env.append_unique("CXXFLAGS", [ "-I" + include for include in ctx.env["CATALYST::INCLUDE"] ])
    ctx.env.append_unique("LIBPATH", ctx.env["CATALYST::LIBPATH"])

    includes = []
    for file in glob.glob(ctx.path.abspath() + "/insituwrappers/catalyst/*.cpp"):
        for line in open(file, "r"):
            if line.find("#include") != -1:
                if line.find("#include \"vtk") != -1:
                    includes += [ line ]

    ctx.env.CATALYST = ctx.check_cc(
        fragment    = "{0}int main() {{ return 0; }}\n".format("".join(includes)),
        mandatory   = False,
        execute     = False,
        msg         = "Checking for CATALYST headers",
        errmsg      = "not found - set path to CATALYST headers (parameter CATALYST::INCLUDE)",
        okmsg       = "found"
    )

    vtklibs = []
    if len(ctx.env["CATALYST::LIBPATH"]) == 1:
        vtklibs = [ lib.split('/')[-1][3:-3] for lib in glob.glob(ctx.env["CATALYST::LIBPATH"][0] + "/*.so") ]

    ctx.start_msg("Checking for CATALYST libraries")
    if len(vtklibs): # Improve testing CATALYST libraries
        ctx.end_msg("found")
    else:
        ctx.end_msg("not found - set path to CATALYST libraries (parameter CATALYST::LIBPATH)", color='YELLOW')
        ctx.env.CATALYST = False

    ctx.env.append_unique("LIB", vtklibs)

def configure(ctx):
    env = ctx.env
    ctx.setenv("wrappers", ctx.env.derive())

    check_catalyst(ctx)

    if ctx.env.BUILD_TOOLS == "0":
        metis = ctx.env.METISLIB[0]
    else:
        metis = "metis"

    if ctx.env.LIBTYPE == "SHARED":
        ctx.env.append_unique("LIB", [ "parmetis", metis ])
    if ctx.env.LIBTYPE == "STATIC":
        ctx.env.append_unique("STLIB", [ "parmetis" ])

    env.append_unique("LIBPATH", ctx.env["LIBPATH"])
    env.append_unique("LIB", ctx.env["LIB"])
    env.append_unique("STLIB", ctx.env["STLIB"])
    env.CATALYST = ctx.env.CATALYST
    ctx.setenv("", env)

def build(ctx):
    sources = ctx.path.ant_glob('metis/**/*.cpp')
    sources += ctx.path.ant_glob('math/**/*.cpp')
    if ctx.env.CATALYST:
        sources += ctx.path.ant_glob('insituwrappers/catalyst/**/*.cpp')
    else:
        sources += ctx.path.ant_glob('insituwrappers/dummy/**/*.cpp')

    env = ctx.env
    ctx.env = ctx.all_envs["wrappers"];

    ctx.objects(
        source = sources,
        target = "wrappers",
        use    = "espreso_includes",
    )

    ctx.env = env
