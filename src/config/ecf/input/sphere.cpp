
#include "sphere.h"

#include "../../configuration.hpp"

espreso::SphereGeneratorConfiguration::SphereGeneratorConfiguration()
{

	element_type = GENERATOR_ELEMENT_TYPE::HEXA8;

	uniform_decomposition = true;

	inner_radius = 5;
	outer_radius = 10;
	clusters = 1;
	layers = 1;
	domains_x = domains_y = domains_z = 2;
	elements_x = elements_y = elements_z = 5;

	REGISTER(uniform_decomposition, ECFMetaData()
			.setdescription({ "Turn METIS decomposition on/off." })
			.setdatatype({ ECFDataType::BOOL }));

	addSeparator();

	REGISTER(nodes, ECFMetaData()
			.setdescription({ "The name of generated region.", "A specification of a region." })
			.setdatatype({ ECFDataType::STRING, ECFDataType::INTERVAL })
			.setpattern({ "MY_NODE_REGION", "(0, 1) (0, 1) <0, 0>" }));

	REGISTER(edges, ECFMetaData()
			.setdescription({ "The name of generated region.", "A specification of a region." })
			.setdatatype({ ECFDataType::STRING, ECFDataType::INTERVAL })
			.setpattern({ "MY_EDGE_REGION", "<0, 1> <0, 0> <0, 0>" }));

	REGISTER(faces, ECFMetaData()
			.setdescription({ "The name of generated region.", "A specification of a region." })
			.setdatatype({ ECFDataType::STRING, ECFDataType::INTERVAL })
			.setpattern({ "MY_FACE_REGION", "<0, 1> <0, 1> <0, 0>" }));

	REGISTER(elements, ECFMetaData()
			.setdescription({ "The name of generated region.", "A specification of a region." })
			.setdatatype({ ECFDataType::STRING, ECFDataType::INTERVAL })
			.setpattern({ "MY_ELEMENT_REGION", "CHESSBOARD_WHITE" })
			.addoption(ECFOption().setname("CHESSBOARD_WHITE").setdescription("White parts of chess-board."))
			.addoption(ECFOption().setname("CHESSBOARD_BLACK").setdescription("Black parts of chess-board.")));

	addSeparator();

	REGISTER(element_type, ECFMetaData()
			.setdescription({ "A type of an element generated by SPHERE GENERATOR." })
			.setdatatype({ ECFDataType::OPTION })
			.addoption(ECFOption().setname("HEXA8").setdescription("HEXAHEDRON"))
			.addoption(ECFOption().setname("HEXA20").setdescription("HEXAHEDRON with midpoints"))
			.addoption(ECFOption().setname("TETRA4").setdescription("TETRAHEDRON"))
			.addoption(ECFOption().setname("TETRA10").setdescription("TETRAHEDRON with midpoints"))
			.addoption(ECFOption().setname("PRISMA6").setdescription("PRISMA"))
			.addoption(ECFOption().setname("PRISMA15").setdescription("PRISMA with midpoints"))
			.addoption(ECFOption().setname("PYRAMID5").setdescription("PYRAMID"))
			.addoption(ECFOption().setname("PYRAMID13").setdescription("PYRAMID with midpoints")));

	addSpace();

	REGISTER(clusters, ECFMetaData()
			.setdescription({ "Number of clusters in x, y-direction in generated SPHERE." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	REGISTER(layers, ECFMetaData()
			.setdescription({ "Number of layers in generated SPHERE." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	addSpace();

	REGISTER(domains_x, ECFMetaData()
			.setdescription({ "Number of domains in x-direction in generated SPHERE." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	REGISTER(domains_y, ECFMetaData()
			.setdescription({ "Number of domains in y-direction in generated SPHERE." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	REGISTER(domains_z, ECFMetaData()
			.setdescription({ "Number of domains in z-direction in generated SPHERE." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	addSpace();

	REGISTER(elements_x, ECFMetaData()
			.setdescription({ "Number of elements in x-direction in generated SPHERE." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	REGISTER(elements_y, ECFMetaData()
			.setdescription({ "Number of elements in y-direction in generated SPHERE." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	REGISTER(elements_z, ECFMetaData()
			.setdescription({ "Number of elements in z-direction in generated SPHERE." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

}

