
#include "grid.h"

#include "../../configuration.hpp"

espreso::GridGeneratorConfiguration::GridGeneratorConfiguration()
{
	element_type = GENERATOR_ELEMENT_TYPE::HEXA8;
	start_x = start_y = start_z = 0;
	length_x = length_y = length_z = 1;
	rotation_x = rotation_y = rotation_z = "0";
	projection_x = "x";
	projection_y = "y";
	projection_z = "z";

	uniform_decomposition = true;
	random_partition = false;

	chessboard_size = 2;

	blocks_x = blocks_y = blocks_z = 1;
	clusters_x = clusters_y = clusters_z = 1;
	domains_x = domains_y = domains_z = 2;
	elements_x = elements_y = elements_z = 5;

	REGISTER(uniform_decomposition, ECFMetaData()
			.setdescription({ "Turn METIS decomposition on/off." })
			.setdatatype({ ECFDataType::BOOL }));

	REGISTER(random_partition, ECFMetaData()
			.setdescription({ "Decomposition by METIS is done using a random number of parts." })
			.setdatatype({ ECFDataType::BOOL }));

	REGISTER(noncontinuous, ECFMetaData()
			.setdescription({ "A cluster ID.", "A number of pseudo non-continuous parts." })
			.setdatatype({ ECFDataType::NONNEGATIVE_INTEGER, ECFDataType::POSITIVE_INTEGER })
			.setpattern({ "0", "2" }));

	nonuniform_nparts = 0;
	REGISTER(nonuniform_nparts, ECFMetaData()
			.setdescription({ "A number of parts when nonuniform decomposition is set (0 for keep the number of parst the same)." })
			.setdatatype({ ECFDataType::NONNEGATIVE_INTEGER })
			.allowonly([&] () { return !uniform_decomposition; }));

	addSeparator();

	REGISTER(start_x, ECFMetaData()
			.setdescription({ "A x-coordinate of generated GRID." })
			.setdatatype({ ECFDataType::FLOAT }));

	REGISTER(start_y, ECFMetaData()
			.setdescription({ "A y-coordinate of generated GRID." })
			.setdatatype({ ECFDataType::FLOAT }));

	REGISTER(start_z, ECFMetaData()
			.setdescription({ "A z-coordinate of generated GRID." })
			.setdatatype({ ECFDataType::FLOAT }));

	addSpace();

	REGISTER(length_x, ECFMetaData()
			.setdescription({ "A x-length of generated GRID." })
			.setdatatype({ ECFDataType::FLOAT }));

	REGISTER(length_y, ECFMetaData()
			.setdescription({ "A y-length of generated GRID." })
			.setdatatype({ ECFDataType::FLOAT }));

	REGISTER(length_z, ECFMetaData()
			.setdescription({ "A z-length of generated GRID." })
			.setdatatype({ ECFDataType::FLOAT }));

	addSpace();

	REGISTER(nodes, ECFMetaData()
			.setdescription({ "The name of generated region.", "A specification of a region." })
			.setdatatype({ ECFDataType::STRING, ECFDataType::INTERVAL })
			.setpattern({ "MY_NODE_REGION", "(0, 1) (0, 1) <0, 0>" }));

	REGISTER(edges, ECFMetaData()
			.setdescription({ "The name of generated region.", "A specification of a region." })
			.setdatatype({ ECFDataType::STRING, ECFDataType::INTERVAL })
			.setpattern({ "MY_EDGE_REGION", "<0, 1> <0, 0> <0, 0>" }));

	REGISTER(faces, ECFMetaData()
			.setdescription({ "The name of generated region.", "A specification of a region." })
			.setdatatype({ ECFDataType::STRING, ECFDataType::INTERVAL })
			.setpattern({ "MY_FACE_REGION", "<0, 1> <0, 1> <0, 0>" }));

	REGISTER(elements, ECFMetaData()
			.setdescription({ "The name of generated region.", "A specification of a region." })
			.setdatatype({ ECFDataType::STRING, ECFDataType::INTERVAL })
			.setpattern({ "MY_ELEMENT_REGION", "CHESSBOARD_WHITE" })
			.addoption(ECFOption().setname("CHESSBOARD_WHITE").setdescription("White parts of chess-board."))
			.addoption(ECFOption().setname("CHESSBOARD_BLACK").setdescription("Black parts of chess-board.")));

	addSpace();

	REGISTER(chessboard_size, ECFMetaData()
			.setdescription({ "A number of chess-board blocks." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	addSpace();

	REGISTER(projection_x, ECFMetaData()
			.setdescription({ "Projection of x-coordinate of generated GRID." })
            .setvariables({ "X" })
			.setdatatype({ ECFDataType::EXPRESSION }));

	REGISTER(projection_y, ECFMetaData()
			.setdescription({ "Projection of y-coordinate of generated GRID." })
            .setvariables({ "Y" })
			.setdatatype({ ECFDataType::EXPRESSION }));

	REGISTER(projection_z, ECFMetaData()
			.setdescription({ "Projection of z-coordinate of generated GRID." })
            .setvariables({ "Z" })
			.setdatatype({ ECFDataType::EXPRESSION }));

	addSpace();

	REGISTER(rotation_x, ECFMetaData()
			.setdescription({ "Rotation of x-coordinate of generated GRID." })
			.setdatatype({ ECFDataType::EXPRESSION }));

	REGISTER(rotation_y, ECFMetaData()
			.setdescription({ "Rotation of y-coordinate of generated GRID." })
			.setdatatype({ ECFDataType::EXPRESSION }));

	REGISTER(rotation_z, ECFMetaData()
			.setdescription({ "Rotation of z-coordinate of generated GRID." })
			.setdatatype({ ECFDataType::EXPRESSION }));

	addSeparator();

	REGISTER(element_type, ECFMetaData()
			.setdescription({ "A type of an element generated by GRID GENERATOR." })
			.setdatatype({ ECFDataType::OPTION })
			.addoption(ECFOption().setname("HEXA8").setdescription("HEXAHEDRON"))
			.addoption(ECFOption().setname("HEXA20").setdescription("HEXAHEDRON with midpoints"))
			.addoption(ECFOption().setname("TETRA4").setdescription("TETRAHEDRON"))
			.addoption(ECFOption().setname("TETRA10").setdescription("TETRAHEDRON with midpoints"))
			.addoption(ECFOption().setname("PRISMA6").setdescription("PRISMA"))
			.addoption(ECFOption().setname("PRISMA15").setdescription("PRISMA with midpoints"))
			.addoption(ECFOption().setname("PYRAMID5").setdescription("PYRAMID"))
			.addoption(ECFOption().setname("PYRAMID13").setdescription("PYRAMID with midpoints"))
			.addoption(ECFOption().setname("SQUARE4").setdescription("SQUARE"))
			.addoption(ECFOption().setname("SQUARE8").setdescription("SQUARE with midpoints"))
			.addoption(ECFOption().setname("TRIANGLE3").setdescription("TRIANGLE"))
			.addoption(ECFOption().setname("TRIANGLE6").setdescription("TRIANGLE with midpoints")));

	addSpace();

	REGISTER(blocks_x, ECFMetaData()
			.setdescription({ "Number of blocks in x-direction in generated GRID." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	REGISTER(blocks_y, ECFMetaData()
			.setdescription({ "Number of blocks in y-direction in generated GRID." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	REGISTER(blocks_z, ECFMetaData()
			.setdescription({ "Number of blocks in z-direction in generated GRID." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	addSpace();

	REGISTER(clusters_x, ECFMetaData()
			.setdescription({ "Number of clusters in x-direction in generated GRID." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	REGISTER(clusters_y, ECFMetaData()
			.setdescription({ "Number of clusters in y-direction in generated GRID." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	REGISTER(clusters_z, ECFMetaData()
			.setdescription({ "Number of clusters in z-direction in generated GRID." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	addSpace();

	REGISTER(domains_x, ECFMetaData()
			.setdescription({ "Number of domains in x-direction in generated GRID." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	REGISTER(domains_y, ECFMetaData()
			.setdescription({ "Number of domains in y-direction in generated GRID." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	REGISTER(domains_z, ECFMetaData()
			.setdescription({ "Number of domains in z-direction in generated GRID." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	addSpace();

	REGISTER(elements_x, ECFMetaData()
			.setdescription({ "Number of elements in x-direction in generated GRID." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	REGISTER(elements_y, ECFMetaData()
			.setdescription({ "Number of elements in y-direction in generated GRID." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	REGISTER(elements_z, ECFMetaData()
			.setdescription({ "Number of elements in z-direction in generated GRID." })
			.setdatatype({ ECFDataType::POSITIVE_INTEGER }));

	addSpace();

	REGISTER(blocks, ECFMetaData()
			.setdescription({ "A block ID.", "Turn generation of a block on/off." })
			.setdatatype({ ECFDataType::NONNEGATIVE_INTEGER, ECFDataType::BOOL })
			.setpattern({ "0", "FALSE" }));
}



