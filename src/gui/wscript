
from waflib.TaskGen import feature, before_method, after_method
@feature('cxx')
@after_method('process_source')
@before_method('apply_incpaths')
def add_includes_paths(self):
   incs = set(self.to_list(getattr(self, 'includes', '')))
   for x in self.compiled_tasks:
       incs.add(x.inputs[0].parent.path_from(self.path))
   self.includes = sorted(incs)

def configure(ctx):
    try:
        ctx.env["COMPILER_CXX"] = ctx.env["CXX"]
        ctx.load("qt5")
        ctx.env.QT = True
    except ctx.errors.ConfigurationError:
        ctx.env.QT = False

def build(ctx):
    if not ctx.env.QT:
        return

    ctx.objects(
        source = ctx.path.ant_glob("**/*.ui"),
        target = "ui"
    )

    ctx(
        features = "qt5 cxx cxxprogram",
        source   = ctx.path.ant_glob("**/*.cpp"),
        moc      = ctx.path.ant_glob("**/*.h"),

        use      = "ui basis config mesh loader generator ansys_in espreso_in openfoam_in",
        uselib   = "QT5CORE QT5GUI QT5WIDGETS QT5OPENGL",
        includes = ".",

        target   = "espresogui",
        install_path = ctx.ROOT + "/bin"
    )
